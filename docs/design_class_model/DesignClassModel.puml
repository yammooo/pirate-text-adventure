@startuml
' Interfaces
interface JFrame
interface JPanel

interface Observer {
    + update(): void
}

interface Observable {
    + addObserver(observer: Observer): void
    + removeObserver(observer: Observer): void
    + notifyObservers(event: Event): void
}

' WindowState
enum WindowState {
    MENU
    GAME
    GAME_OVER
    GAME_WIN
}

' Main Frame and Panels
class MainFrame {
    - commandPanel: CommandPanel
    - graphicsPanel: GraphicsPanel
    + getters(): ...
}

MainFrame -|> JFrame
MainFrame --> CommandPanel
MainFrame --> GraphicsPanel

class CommandPanel {
    - displayArea: JTextArea
    - inputField: JTextField
    - currentMessage: String
    - messageQueue: Queue<String>
    - commandPanelHandler: CommandPanelHandler
    + CommandPanel()
    + showSystemMessage(message: String)
    + getCommandPanelHandler(): CommandPanelHandler
}



CommandPanel -|> JPanel
CommandPanel <--> CommandPanelHandler

class CommandPanelHandler implements Observer {
    - commandPanel: CommandPanel
    - interactionState: InteractionState
    + handleUserInput(userInput: String): void
    + setState(state: InteractionState): void
}

CommandPanelHandler ------> AppHandler

class GraphicsPanel implements Observer {
    - screenWidth: int
    - screenHeight: int
    + GraphicsPanel()
    + update(): void
    + setBackgroundImage(imagePath: String): void
    + displayMenu(g2: Graphics2D): void
    + displayGameOver(g2: Graphics2D): void
    + displayGameWin(g2: Graphics2D): void
    + displayGame(g2: Graphics2D): void
    - drawHearts(g2: Graphics2D): void
    - drawBackpackStatus(g2: Graphics2D): void
}

GraphicsPanel -|> JPanel

' Facade and Game State
class AppFacade {
    - appHandler: AppHandler
    - awsHandler: AWSHandler
    - mainFrame: MainFrame
    + start(): void
}

class AppHandler implements Observable {
    - AppHandler instance
    - observers: ArrayList<Observer>
    - appState: AppState
    + {static} getInstance(): AppHandler
    + getAppState(): AppState
    + addObserver(o: Observer): void
    + removeObserver(o: Observer): void
    + notifyObservers(): void
    + notifyObservers(e: Event): void
    + startNewGame(): void
    + startSavedGame(gameID: int): void
    + getSavedGames(): int
    + exitToMenu(): void
    + move(locationID: int): void
    + pickUpItem(entityID: int): void
    + dropItem(entityID: int): void
    - gameOver(): void
    - win(): void
}

AppHandler --> AppState
AppFacade --> AWSHandler
AppFacade ---> MainFrame

class AppState {
    - AppState instance
    - lastUserQueryResult: UserQueryResult
    - gameState: GameState
    - currentWindow: WindowState
    + {static} getInstance(): AppState
    + getters(): ...
    + setGameState(gameState: GameState): void
    + setWindowToMenu(): void
    + setWindowToGame(): void
    + setWindowToGameOver(): void
    + setWindowToGameWin(): void
}


AppFacade ------> AppHandler
AppState --> WindowState
AppState --> GameState

class UserQueryResult {
    - result: String
    - success: boolean
    + getters(): ...
    + setResult(result: String): void
    + setSuccess(success: boolean): void
}

AppState --> UserQueryResult


class GameState {
    - title: String
    - pirate: Pirate
    - map: Map
    + getters(): ...
}

class AWSHandler implements Observer {
    - {static} instance: AWSHandler
    - CREDENTIALS_FILE_PATH: String
    - bucketName: String
    + {static} getInstance(): AWSHandler
    + update(): void
    + saveAsNewGame(): void
    + countSavedGames(): int
    + loadFromS3(): ArrayList<String>
    + getSavedGames(gameID: int): String
    + saveAnExistingGame(json: String, fileName: String): void
    + deleteGame(fileName: String): void
    - saveToS3(json: String): void
    - downloadFileContent(s3Client: S3Client, bucketName: String, key: String): String
    - getGamesTitles(): ArrayList<String>
}

AWSHandler ------> AppHandler

' Translator
class GameStateTranslator {
    - {static} builder: GsonBuilder
    - {static} gson: Gson
    + {static} jsonToGameState(json: String): GameState
    + {static} gameStateToJson(gameState: GameState): String
}

AppHandler --> GameStateTranslator
AWSHandler --> GameStateTranslator

' Game Entities
class Pirate {
    - maxLives: int
    - lives: int
    - backpack: Backpack
    + getters(): ...
}

Pirate --> Backpack

class Backpack {
    - maxWeight: int
    - items: ArrayList<CollectableItem>
    + getters(): ...
    + addItem(item: CollectableItem): void
    + removeItem(id: int): void
    + isItemEquipped(id: int): boolean
    + getItems(): ArrayList<CollectableItem>
    + getItemById(id: int): CollectableItem
}

class Map {
    - locations: ArrayList<Location>
    - obstacles: Map<Pair<int, int>, Obstacle>
    - currentPirateLocationID: int
    + getters(): ...
    + getLocationById(id: int): Location
    + getObstacleByLocationsID(int, int): Obstacle
    + getPirateLocationID(id: int): int
    + removeObstacleByLocationsID(id1: int, id2: int): Obstacle
}

Map--> Obstacle

GameState --> Pirate
GameState --> Map

class Location {
    - id: int
    - name: String
    - description: String
    - items: ArrayList<CollectableItem>
    - viewables: ArrayList<ViewableItem>
    - npcs: ArrayList<NPC>
    - adjacentLocations: ArrayList<int>
    + getters(): ...
    + getEntityById(int): Entity
    + getAllEntities(): ArrayList<Entity>
    + addCollectableItem(CollectableItem): void
    + isAdjacentLocation(Location): boolean
    + getCollectableItemByID(int): CollectableItem
    + addAdjacentLocation(int): void
    + removeItem(int): void
}

Map --> Location

interface Entity {
    - ID: int
    - name: String
    - description: String
    + getters(): ...
}

class CollectableItem implements Entity {
    - weight: int
    - requiredEntityID: int
    + getters(): ...
}

class ViewableItem implements Entity {
}

class NPC implements Entity {
    - dialogue: String
    + getters(): ...
}

class Obstacle implements Entity {
    - itemToDefeatID: int
    + getters(): ...
}

Location --> Entity

' State Pattern
interface InteractionState {
    + handleInput(context: CommandPanelHandler, input: String): void
    + display(commandPanel: CommandPanel): void
}

CommandPanelHandler --> InteractionState
@enduml